---
swagger: "2.0"
info:
  description: "This is the macro cards API.  To use it you will first need an application\
    \ key.  You can find out more at macro.cards/apiref. "
  version: "1.0.0"
  title: "Macro Cards"
  termsOfService: "https://macro.cards/terms/"
  contact:
    email: "support@macropeople.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "user-testing.herokuapp.com"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Authentications"
- name: "tags"
  description: "Choose a tag"
- name: "cards"
  description: "This mode will only return questions that have never been answered\
    \ correctly."
  externalDocs:
    description: "Find out more"
    url: "http://macro.cards/about"
- name: "sessions"
  description: "Taking a timed exam"
- name: "submit"
  description: "adding a question to the question bank"
  externalDocs:
    description: "Find out more "
    url: "http://macro.cards/docs"
schemes:
- "https"
security:
- AuthToken: []
  AuthEmail: []
paths:
  /auth/facebook:
    post:
      tags:
      - "auth"
      summary: "Auth API for facebook"
      description: "Authenticate a user via facebook auth_token"
      operationId: "authFacebook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "params"
        description: "params for facebook auth"
        required: true
        schema:
          $ref: "#/definitions/params"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200"
        401:
          description: "The auth_token sent was Invalid"
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Unknown error occured"
          schema:
            $ref: "#/definitions/inline_response_401"
  /auth/google:
    post:
      tags:
      - "auth"
      summary: "Auth API for google"
      description: "Authenticate a user via google auth_token"
      operationId: "authGoogle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "params"
        description: "params for google auth"
        required: true
        schema:
          $ref: "#/definitions/params_1"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200"
        401:
          description: "The auth_token sent was Invalid"
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Unknown error occured"
          schema:
            $ref: "#/definitions/inline_response_401"
  /auth/linkedin:
    post:
      tags:
      - "auth"
      summary: "Auth API for linkedin"
      description: "Authenticate a user via linkedin auth_token"
      operationId: "authLinkedin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "params"
        description: "params for linkedin auth"
        required: true
        schema:
          $ref: "#/definitions/params_2"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/inline_response_200"
        401:
          description: "The auth_token sent was Invalid"
          schema:
            $ref: "#/definitions/inline_response_401"
        500:
          description: "Unknown error occured"
          schema:
            $ref: "#/definitions/inline_response_401"
  /privacy:
    get:
      tags:
      - "privacy"
      summary: "retreive the latest privacy policy"
      operationId: "getPrivacy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "get latest privacy policy"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /terms:
    get:
      tags:
      - "privacy"
      summary: "retreive the latest T&Cs"
      operationId: "getTerms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "get latest terms policy"
          schema:
            $ref: "#/definitions/inline_response_200_1"
  /tags:
    get:
      tags:
      - "tags"
      summary: "Retrieve list of available tags"
      description: "The user needs to choose a tag with which to play the game"
      operationId: "getTags"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tag"
        404:
          description: "No tags found"
  /tags/{tagId}:
    patch:
      tags:
      - "tags"
      summary: "Update an existing tag"
      description: "Update tag name or description"
      operationId: "updateTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "tagId"
        in: "path"
        description: "ID of tag to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated tag details"
        required: true
        schema:
          $ref: "#/definitions/tagEdit"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Tag not found"
        405:
          description: "Validation exception"
  /cards:
    post:
      tags:
      - "cards"
      summary: "Submit a new question to the question bank"
      description: "Accepts a question, set of answers, an explanation, and performs\
        \ server side validation of the result"
      operationId: "submitQuestion"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user card"
        required: true
        schema:
          $ref: "#/definitions/newCard"
      responses:
        405:
          description: "Invalid input"
  /cards/{questionId}:
    get:
      tags:
      - "cards"
      summary: "Get question and answers only"
      description: "In VIEW mode, or if we wish to index questions on a search engine,\
        \ we may let users visit a question for free.  However, if they want to see\
        \ the answer or explanation, they will need to RUN and spend 2 tokens. "
      operationId: "viewCard"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question to view"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/getCard"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
    put:
      tags:
      - "cards"
      summary: "Edit an entire card"
      description: "Submits a question, set of answers, an explanation, and performs\
        \ server side validation of the result."
      operationId: "editQuestion"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "question ID to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Created user card"
        required: true
        schema:
          $ref: "#/definitions/editCard"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "cards"
      summary: "Deletes a question"
      description: "Marks question as deleted.  It does not delete the question! \
        \ But only administrators should be able to view it afterwards."
      operationId: "deleteQuestion"
      parameters:
      - name: "questionId"
        in: "path"
        description: "Question id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /cards/count:
    get:
      tags:
      - "cards"
      summary: "Number of Cards available"
      description: "Excludes cards which the user has answered correctly in the past.\
        \ If input is blank, returns list of tags and a count of available cards for\
        \ each.  If tag list supplied, shows how many cards are available that have\
        \ ALL or ANY of the supplied tags"
      operationId: "countCards"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "countCards"
        description: "Input is optional - left blank will return all tags and a count"
        required: false
        schema:
          $ref: "#/definitions/tagFilter"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tagCount"
        400:
          description: "Invalid tag value"
  /cards/run:
    get:
      tags:
      - "cards"
      summary: "Find a random Card (can be filtered by Tag)"
      description: "The backend will return a random card.  A tag filter may be applied.\
        \  The user's number of correct answers in a row will also be returned.  If\
        \ this request is submitted by the same user from 2 browsers within 2 minutes,\
        \ the same question will be returned.  If the users previous card was answered\
        \ incorrectly, or it is the users first card for this tag combination, then\
        \ an easy card will be returned.  Otherwise cards will be returned with progressive\
        \ difficulty.  Only non-deleted cards, and cards with more than -2 votes will\
        \ be returned."
      operationId: "cardGet"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "countCards"
        description: "Input is optional - left blank will return a random (non-deleted)\
          \ question from the entire question bank."
        required: false
        schema:
          $ref: "#/definitions/tagFilter"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid tag value"
  /cards/taken:
    get:
      tags:
      - "cards"
      summary: "Get list of recently taken cards"
      description: "Relevant to View Cards screen.  Will return cards taken, most\
        \ recent first.  Send page number to return later cards."
      operationId: "cardsTaken"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "page"
        required: false
        schema:
          $ref: "#/definitions/getCardList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid tag value"
  /cards/{questionId}/edit:
    get:
      tags:
      - "cards"
      summary: "Get an entire card (for edit mode)"
      description: "Get all question information for editing. "
      operationId: "editCardInfo"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "question ID to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/editCard"
        405:
          description: "Invalid input"
  /cards/{questionId}/statistics:
    get:
      tags:
      - "cards"
      summary: "Get card statistics"
      description: "Statistics should only be served if the user has previously answered\
        \ the question.  Once statistics are served, the user loses the ability to\
        \ vote on that question. "
      operationId: "viewCardStatistics"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question for which to view stats"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/cardStatistics"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
        405:
          description: "User has not answered the question"
  /cards/{questionId}/verify:
    put:
      tags:
      - "cards"
      summary: "Get result and explanation"
      description: "Returns the result (pass / fail), the correct answer and the explanation.\
        \  Number of tokens earned (if any) is also returned.  If the user had started\
        \ another Card in another browser in the last 2 minutes, that Card is marked\
        \ incorrect (after this one). If the user had 'timed out' from a previous\
        \ question, then that Card is marked incorrect (before this one, hence losing\
        \ the streak).   "
      operationId: "verifyCard"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question to verify"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "For Single Answer and Multiple Choice, provide one / one or\
          \ more answer IDs.  For User Input, provide answerText.  This will be compared\
          \ (case insensitively) with the allowed answers."
        required: true
        schema:
          $ref: "#/definitions/answerChosen"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/cardResponse"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /cards/{questionId}/vote:
    put:
      tags:
      - "cards"
      - "vote"
      summary: "Vote on a question"
      description: "Users can vote questions up (good quality) or down (poor quality).\
        \  If voting down, a reason should be supplied.  The user can only vote if\
        \ they have previously achieved a STREAK, and if they have answered the question.\
        \  The user is NOT able to vote if they have previously voted or viewed statistics\
        \ for this question. NOTE: the statistics are not yet defined, but once they\
        \ are, they should be sent in the response object (along with comments etc)"
      operationId: "voteCard"
      produces:
      - "application/json"
      parameters:
      - name: "questionId"
        in: "path"
        description: "ID of question"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/voteSubmit"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/cardStatistics"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Question not found"
  /sessions/count:
    get:
      tags:
      - "sessions"
      summary: "Number of Sessions available"
      description: "Excludes sessions which the user has taken in the past. If input\
        \ is blank, returns list of tags and a full count of available sessions for\
        \ each.  If tag list supplied, shows how many sessions are available that\
        \ have ALL or ANY of the supplied tags"
      operationId: "countSessions"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "countSessions"
        description: "Input is optional - left blank will return all tags and a count"
        required: false
        schema:
          $ref: "#/definitions/tagFilter"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/tagCount"
        400:
          description: "Invalid tag value"
  /sessions/run:
    get:
      tags:
      - "sessions"
      summary: "Find a random Session (can be filtered by Tag)"
      description: "The backend will return the first card from a random session.\
        \  A tag filter may be applied.  Sessions that the user has taken before are\
        \ excluded. If the user is already in a session, then the current (unanswered)\
        \ card is returned.  The STREAK attribute shows how many questions have been\
        \ answered (right or wrong), which can be used to deduce progress."
      operationId: "sessionRun"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "sessionFilter"
        description: "Input is optional - left blank will return a random (non-deleted)\
          \ question from the entire question bank."
        required: false
        schema:
          $ref: "#/definitions/tagFilter"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Question"
        400:
          description: "Invalid tag value"
  /user/signup:
    get:
      tags:
      - "user"
      summary: "verifies an authentication request and issues key"
      description: "Server will validate the authentication and issue a key.  However\
        \ if no email exists for the user, or the terms haven't been signed, a 403\
        \ response is given further info requested."
      operationId: "userSignup"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "userSignup"
        description: "Authentication validation is performed server-side against the\
          \ authProvider"
        required: false
        schema:
          $ref: "#/definitions/userLogin"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            example: "myMacroCardsAuthKey88234lksdvadkfj23452"
        401:
          description: "could not verify authentication details"
  /user/login:
    get:
      tags:
      - "user"
      summary: "verifies an authentication request and issues key"
      description: "Server will validate the authentication and issue a key.  However\
        \ if no email exists for the user, or the terms haven't been signed, a 403\
        \ response is given further info requested."
      operationId: "userLogin"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "userLogin"
        description: "Authentication validation is performed server-side against the\
          \ authProvider"
        required: false
        schema:
          $ref: "#/definitions/userLogin"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
            example: "myMacroCardsAuthKey88234lksdvadkfj23452"
        403:
          description: "further info required"
          schema:
            type: "string"
            example: "email"
            description: "valid values include: email,terms"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "The ID that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user.  Once deleted, the\
        \ account cannot be re-enabled for 24hrs."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid userid supplied"
        404:
          description: "User not found"
  /vote_reasons:
    get:
      tags:
      - "vote"
      summary: "Get list of reasons for downvoting a question"
      description: "Provide the list of reasons (and IDs) for downvoting a question.\
        \  The reasonIds are used in the /cards/{questionId}/vote service."
      operationId: "getVoteReasons"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/voteReasons"
securityDefinitions:
  AuthEmail:
    type: "apiKey"
    name: "X-User-Email"
    in: "header"
  AuthToken:
    type: "apiKey"
    name: "X-User-Token"
    in: "header"
definitions:
  Question:
    type: "object"
    properties:
      questionId:
        type: "integer"
        format: "int64"
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionTitle:
        type: "string"
      questionBody:
        type: "string"
      answers:
        type: "array"
        items:
          $ref: "#/definitions/Answers"
      streak:
        type: "integer"
        description: "number of consecutive cards answered correctly on current streak"
  Answers:
    type: "object"
    properties:
      answerId:
        type: "integer"
        format: "int64"
        example: 2
      answerText:
        type: "string"
        example: "my final answer"
  answerChosen:
    type: "object"
    properties:
      answerIds:
        type: "array"
        example:
        - 1
        - 2
        - 3
        items:
          type: "integer"
          format: "int64"
      answerText:
        type: "string"
        example: "some user entered input"
  cardResponse:
    type: "object"
    properties:
      result:
        type: "boolean"
        description: "1 = pass, 0=fail"
      answerIds:
        type: "array"
        example: ""
        description: "the id of the correct answer (multiple for multiple choice)"
      answerText:
        type: "string"
        example: "XYZ"
        description: "the correct answer text (needed for user input)"
      explanationText:
        type: "string"
        example: "you should have choosed XYZ, stupid"
      voteResultPrevious:
        type: "integer"
        example: 2
        description: "The users previous vote - 0=unvoted, 1=down, 2=up"
      voteLock:
        type: "integer"
        example: 0
        description: "If it is the users own question, or they have previously viewed\
          \ the statistics, the vote is locked (else the vote may be skewed by who\
          \ wrote the question)"
      tokensEarned:
        type: "integer"
        format: "int64"
        example: -2
        description: "The number of tokens earned (if any).  For the first card, 2\
          \ tokens are deducted. For card 5 and beyond, 1 token is earned."
      started_at:
        type: "string"
        format: "date-time"
        description: "The timestamp at which the question was sent"
  cardStatistics:
    type: "object"
    properties:
      author_username:
        type: "string"
        example: "community"
        description: "the user name of the person who submited the card"
      author_id:
        type: "integer"
        format: "int64"
      times_taken:
        type: "integer"
        format: "int64"
        description: "number of times this question has been taken"
      percent_correct:
        type: "integer"
        format: "int64"
        description: "percentage of correct answers"
      average_time:
        type: "integer"
        format: "int64"
        description: "average number of milliseconds to answer question correctly"
      total_votes:
        type: "integer"
        format: "int64"
        description: "sum of up and downvotes"
      create_date:
        type: "string"
        format: "date-time"
        description: "When the card was first created"
      edit_date:
        type: "string"
        format: "date-time"
        description: "When the card was last edited"
      editor_id:
        type: "string"
        description: "Id of user who last edited the card"
      editor_username:
        type: "string"
        description: "Username of user who last edited the card"
  newCard:
    type: "object"
    required:
    - "answers"
    - "explanationText"
    - "questionBody"
    - "questionType"
    properties:
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionBody:
        type: "string"
        example: "What comes of nothing?"
      answers:
        type: "array"
        example: ""
      explanationText:
        type: "string"
        example: "nothing comes of nothing"
      tags:
        type: "array"
        description: "comma separated list of ID tags"
        items:
          type: "integer"
          format: "int64"
          example: ""
  editCard:
    type: "object"
    required:
    - "answers"
    - "explanationText"
    - "questionBody"
    - "questionType"
    properties:
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionBody:
        type: "string"
        example: "What comes of nothing?"
      answers:
        type: "array"
        example: ""
      explanationText:
        type: "string"
        example: "nothing comes of nothing"
      tags:
        type: "array"
        example: ""
  getCard:
    type: "object"
    properties:
      cardDefinition:
        $ref: "#/definitions/getCard_cardDefinition"
      deleteStatus:
        type: "boolean"
        description: "1 = deleted, 0= not deleted"
      questionId:
        type: "integer"
        example: 1
  getCardList:
    type: "integer"
    format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      points:
        type: "integer"
      authentication_token:
        type: "string"
  userLogin:
    type: "object"
    properties:
      authToken:
        type: "string"
        description: "authentication token"
      authProvider:
        type: "string"
        description: "authentication provider (eg Linkedin / Github)"
      userid:
        type: "string"
        description: "authentication provider user id"
  Tag:
    type: "object"
    properties:
      tagId:
        type: "integer"
        format: "int64"
      tagName:
        type: "string"
      tagDesc:
        type: "string"
  tagEdit:
    type: "object"
    properties:
      tagName:
        type: "string"
      tagDesc:
        type: "string"
  tagCount:
    type: "array"
    items:
      $ref: "#/definitions/tagCountObj"
  tagCountObj:
    type: "object"
    properties:
      tagId:
        type: "integer"
        format: "int64"
        description: "tagId is zero for combination tag counts"
      tagCount:
        type: "integer"
        format: "int64"
        example: 324
  tagFilter:
    type: "object"
    properties:
      tags_any:
        type: "array"
        example:
        - 1
        - 2
        - 3
        items:
          type: "integer"
          format: "int64"
      tags_not:
        type: "array"
        example:
        - 4
        - 5
        items:
          type: "integer"
          format: "int64"
  Privacy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        type: "string"
        description: "policy type"
        enum:
        - "Privacy Policy"
        - "T&C"
      body:
        type: "string"
        description: "contents of policy"
      version:
        type: "string"
        description: "version of policy"
      created_at:
        type: "string"
      updated_at:
        type: "string"
        format: "date-time"
    description: "Privacy Policy or T&C object"
  voteReasons:
    type: "object"
    properties:
      vote_reason_id:
        type: "integer"
        format: "int64"
        description: "ReasonID for downvote "
      vote_reason_text:
        type: "string"
        description: "Reason for downvote"
        enum:
        - "Spam"
        - "Inappropriate Content"
        - "Other"
    description: "list of reasons for downvoting a"
  voteSubmit:
    type: "object"
    properties:
      vote_direction:
        type: "string"
        example: "down"
        enum:
        - "up"
        - "down"
      vote_reason_id:
        type: "integer"
        format: "int64"
        description: "ReasonID for downvote, for instance : 1=Spam,2=Inappropriate\
          \ Content, 3=Other.  See GET /Votes "
    description: "Privacy Policy or T&C object"
  params:
    type: "object"
    properties:
      auth_token:
        type: "string"
  inline_response_200:
    properties:
      success:
        type: "boolean"
        description: "specifies if authentication was successful or not"
      user:
        $ref: "#/definitions/User"
      error:
        type: "string"
        description: "error message in case of failure"
  inline_response_401:
    properties:
      error:
        type: "string"
        description: "error message"
  params_1:
    type: "object"
    properties:
      auth_token:
        type: "string"
  params_2:
    type: "object"
    properties:
      auth_token:
        type: "string"
  inline_response_200_1:
    properties:
      privacy:
        $ref: "#/definitions/Privacy"
  getCard_cardDefinition:
    properties:
      questionType:
        type: "string"
        description: "Question Type"
        enum:
        - "Single Answer"
        - "Multiple Choice"
        - "User Input"
      questionBody:
        type: "string"
        example: "What comes of nothing?"
      answers:
        type: "array"
        example: ""
externalDocs:
  description: "Find out more about Swagger Spec"
  url: "http://swagger.io/specification/"
